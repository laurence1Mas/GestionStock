<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgBEiHoQNIXSEDiBwhA0gX4MM
        HykAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIINIYuEDSK+gwwikIMM
        IaSDDSDcgw0h44MOIYSACh0aAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEDiJbhA0hsoIN
        HzmEDSBfhA0iPIAOIySDDSKIgw0h7IQNIHb/AAABAAAAAAAAAAAAAAAAAAAAAIMNIWWDDB8pgg8jM4MN
        Ie6DDSHLgw0hnIEPIUUAAAAAAAAAAIMPHyGDDSDFhA0gnQAAAAAAAAAAAAAAAIIOIjWDDiHigw0h54MN
        IdiDDiFtAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgBoaCoMMIs2DDSJMAAAAAAAAAACCDCJqgw4hlIIM
        JCuEDSJ4qgAAAwAAAAAAAAAAAAAAAAAAAACCCyEvhQshLoINIT2DDSHphQshLgAAAAAAAAAAgwwiaYMO
        IJaFDCMsgw4hbZkAMwUAAAAAAAAAAAAAAAAAAAAAhQshLoILIi2EDSKfgw0iYQAAAAAAAAAAAAAAAIIO
        IjWDDiHigw0h54MNIcmDDiKmmQAzBQAAAAAAAAAAAAAAAAAAAACAAAACgw4h4oYNIiYAAAAAAAAAAAAA
        AAAAAAAAgw0hZYYMHiqDDSJMgw0h6oMOIeKDDCGkgw0gjgAAAAAAAAAAhA4gboMNIL0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAgwwhpIQNInKADx4igwwiUoQOIHCDDx8hgw0imIMNId6ECSMdAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIMNIeeDDSKYhA0hm4INIq6EDSHfgw0h54INIIeAECAQAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEDSFNgw0gd4INIWaDDCFUgwwfKQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA//8AAPAfAAD7zwAA+PMAAMf7AADf+wAA3/cAAMP3
        AAD4dwAA988AAPAfAAD//wAA//8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAVKwyCDiFcgw0h0YMNIf+DDSH/gw0hnIAAQAQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDDSHYgw0h/4MN
        IFCHDx4Rhw8eEYYNIiaDDCBAgg4hXoMNIYqDDSC9gw0h+IMNIf+DDSH/gw0h54QOIlkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIMN
        IeiDDSH/gw0h/4MNIf+DDSH/gw0h/4MNIf+DDSH/gw0h/4MNIf+DDSH8gw0hwYMNIWWAACAIAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAggwhVoMNId6DDSHugw0h7oMNIe6DDSHegw0hxIMNIauCDiKBhA0hTYYNGxMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////8D///+AD///nwP//5/w//+I
        fD//wH8f8Yf/j/Cf/8/gP//n5j//x+f/+Y/n//mf5j//n+Af/z/wj/8/8YP/P/+APn//nDx//5/w//8/
        A///AA///4B/////////////////////////////
</value>
  </data>
</root>